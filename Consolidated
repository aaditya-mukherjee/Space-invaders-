#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>
using namespace sf;

class Player {
public:
    RectangleShape shape;
    float speed = 5.0f;
    
    Player(float x, float y) {
        shape.setSize(Vector2f(50, 50));
        shape.setFillColor(Color::Green);
        shape.setPosition(x, y);
    }

    void moveLeft() {
        if (shape.getPosition().x > 0)
            shape.move(-speed, 0);
    }

    void moveRight() {
        if (shape.getPosition().x < 750)
            shape.move(speed, 0);
    }

    void draw(RenderWindow& window) {
        window.draw(shape);
    }
};

class Bullet {
public:
    RectangleShape shape;
    float speed = 10.0f;
    bool isAlive = false;

    Bullet() {
        shape.setSize(Vector2f(5, 10));
        shape.setFillColor(Color::Red);
    }

    void shoot(float x, float y) {
        shape.setPosition(x + 22.5f, y);
        isAlive = true;
    }

    void update() {
        if (isAlive) {
            shape.move(0, -speed);
            if (shape.getPosition().y < 0)
                isAlive = false;
        }
    }

    void draw(RenderWindow& window) {
        if (isAlive) window.draw(shape);
    }
};

class Enemy {
public:
    RectangleShape shape;
    float speed = 1.0f;
    bool isAlive = true;

    Enemy(float x, float y) {
        shape.setSize(Vector2f(50, 50));
        shape.setFillColor(Color::Red);
        shape.setPosition(x, y);
    }

    void moveDown() {
        if (isAlive)
            shape.move(0, speed);
    }

    void draw(RenderWindow& window) {
        if (isAlive) window.draw(shape);
    }
};

int main() {
    srand(time(0));

    RenderWindow window(VideoMode(800, 600), "Top-Down Shooter");

    Player player(375, 550);
    Bullet bullet;
    std::vector<Enemy> enemies;
    int score = 0;
    bool gameOver = false;

    Clock clock;
    
    // Enemy spawn timer
    float spawnTimer = 0.0f;
    float spawnInterval = 1.5f;  // Spawn an enemy every 1.5 seconds

    while (window.isOpen()) {
        float deltaTime = clock.restart().asSeconds();
        Event event;
        while (window.pollEvent(event)) {
            if (event.type == Event::Closed)
                window.close();
        }

        // Game Over check
        if (gameOver) {
            window.clear();
            // Display Game Over Text here
            window.display();
            continue;
        }

        // Handle player movement
        if (Keyboard::isKeyPressed(Keyboard::Left))
            player.moveLeft();
        if (Keyboard::isKeyPressed(Keyboard::Right))
            player.moveRight();

        // Handle shooting
        if (Keyboard::isKeyPressed(Keyboard::Space) && !bullet.isAlive)
            bullet.shoot(player.shape.getPosition().x, player.shape.getPosition().y);

        // Update bullet position
        bullet.update();

        // Enemy spawning logic
        spawnTimer += deltaTime;
        if (spawnTimer >= spawnInterval) {
            spawnTimer = 0;
            float x = rand() % 750;
            enemies.push_back(Enemy(x, 0));
        }

        // Update enemies
        for (auto& enemy : enemies) {
            enemy.moveDown();
            // Check for collision with player bullets
            if (enemy.isAlive && bullet.isAlive && bullet.shape.getGlobalBounds().intersects(enemy.shape.getGlobalBounds())) {
                enemy.isAlive = false;
                bullet.isAlive = false;
                score += 10;
            }
        }

        // Check for collision with the player
        for (auto& enemy : enemies) {
            if (enemy.isAlive && player.shape.getGlobalBounds().intersects(enemy.shape.getGlobalBounds())) {
                gameOver = true;
            }
        }

        // Clear and draw everything
        window.clear();
        player.draw(window);
        bullet.draw(window);
        for (auto& enemy : enemies) {
            enemy.draw(window);
        }

        // Display score
        Text scoreText;
        Font font;
        font.loadFromFile("arial.ttf");
        scoreText.setFont(font);
        scoreText.setString("Score: " + std::to_string(score));
        scoreText.setCharacterSize(24);
        scoreText.setFillColor(Color::White);
        window.draw(scoreText);

        window.display();
    }

    return 0;
}
